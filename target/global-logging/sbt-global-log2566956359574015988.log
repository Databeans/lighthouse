[0m[[0m[0mdebug[0m] [0m[0m> Exec(testOnly jass.metrics.ClusteringMetricsSpec -- -z "compute the overlap metrics", None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / testOnly[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /Users/abidijasser/databricks/ClusteringInfo/target/scala-2.12/classes ...[0m
[0m[[0m[0minfo[0m] [0m[0mdone compiling[0m
[0m[[0m[33mwarn[0m] [0m[0mCanceling execution...[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 18 seconds, 5.605 (32.1%) were spent in GC. [Heap: 0.35GB free of 1.11GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 5.07 (52.2%) were spent in GC. [Heap: 0.74GB free of 1.17GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 5.548 (57.7%) were spent in GC. [Heap: 0.76GB free of 1.18GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 17 seconds, 6.442 (38.0%) were spent in GC. [Heap: 0.66GB free of 1.19GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 5.47 (56.4%) were spent in GC. [Heap: 0.59GB free of 1.19GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 11 seconds, 5.161 (48.5%) were spent in GC. [Heap: 0.55GB free of 1.19GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 8.084 (80.9%) were spent in GC. [Heap: 0.76GB free of 1.20GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 19 seconds, 5.933 (32.8%) were spent in GC. [Heap: 0.55GB free of 1.21GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 5.529 (57.8%) were spent in GC. [Heap: 0.76GB free of 1.22GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 15 seconds, 5.489 (38.4%) were spent in GC. [Heap: 0.40GB free of 1.22GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 5.922 (59.5%) were spent in GC. [Heap: 0.76GB free of 1.23GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 10 seconds, 5.681 (58.9%) were spent in GC. [Heap: 0.74GB free of 1.24GB, max 1.33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
